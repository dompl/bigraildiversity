// ==== LIBRARY ==== //

// Mixins, functions, and other non-declarative things

// == MEDIA QUERIES == //

// Master media query mixin; only for use with screens, of course; should work with raw integers or pixel values; adapted from Kipple: https://github.com/synapticism/kipple
@mixin media($min-query: null, $max-query: null) {
  @if $min-query == null and $max-query == null {
    @warn "Mixin k-media() received two null values; no output.";
    @content; // Pass content anyway, but it won't be wrapped in a media query
  }
  @else if $max-query == null {
    @media screen and (min-width: $min-query+0px) { @content; }
  }
  @else if $min-query == null {
    @media screen and (max-width: $max-query+0px) { @content; }
  }
  @else {
    @media screen and (min-width: $min-query+0px) and (max-width: $max-query+0px) { @content; }
  }
}
@mixin media-above($min-query) {
  @include media($min-query, null) { @content; }
}
@mixin media-below($max-query) {
  @include media(null, $max-query - 1) { @content; }
}
@mixin media-between($min-query: null, $max-query: null) {
  @if $min-query == null or $max-query == null {
    @warn "Mixin media-between() received a null value."
  }
  @include media($min-query, $max-query - 1) { @content; }
}


// == LAYOUT == //

// Margins and positioning helper function
@function spacer($val: 1) {
  @return $spacer * $val + 0px;
}

// == SETTINGS == //

// Master config function
@function config($map, $key) {
  @return map-get($map, $key);
}

// A simple function to retrieve a color from the array; adapted from http://erskinedesign.com/blog/friendlier-colour-names-sass-maps/
// @function color($request) {
//   @return config($_color, $request);
// }

@function social($request) {
  @return config($_social, $request);
}

@function nav_color($request) {
  @return config($_nav_color, $request);
}

// Same thing for theme metadata
@function metadata($request) {
  @return config($_metadata, $request);
}
////
// A collection of function for advanced type checking
// @author Hugo Giraudel
////

@function is-number($value) {
  @return type-of($value) == 'number';
}

@function is-time($value) {
  @return is-number($value) and index('ms' 's', unit($value)) != null;
}

@function is-duration($value) {
  @return is-time($value);
}

@function is-angle($value) {
  @return is-number($value) and index('deg' 'rad' 'grad' 'turn', unit($value)) != null;
}

@function is-frequency($value) {
  @return is-number($value) and index('Hz' 'kHz', unit($value)) != null;
}

@function is-integer($value) {
  @return is-number($value) and round($value) == $value;
}

@function is-relative-length($value) {
  @return is-number($value) and index('em' 'ex' 'ch' 'rem' 'vw' 'vh' 'vmin' 'vmax', unit($value)) != null;
}

@function is-absolute-length($value) {
  @return is-number($value) and index('cm' 'mm' 'in' 'px' 'pt' 'pc', unit($value)) != null;
}

@function is-percentage($value) {
  @return is-number($value) and unit($value) == '%';
}

@function is-length($value) {
  @return is-relative-length($value) or is-absolute-length($value);
}

@function is-resolution($value) {
  @return is-number($value) and index('dpi' 'dpcm' 'dppx', unit($value)) != null;
}

@function is-position($value) {
  @return is-length($value) or is-percentage($value) or index('top' 'right' 'bottom' 'left' 'center', $value) != null;
}
