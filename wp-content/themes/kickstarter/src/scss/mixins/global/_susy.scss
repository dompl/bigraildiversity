/*  ********************************************************
 *   Susy resets
 *   http://oddbird.net/2017/09/25/susy-use/
 *  ********************************************************
 */

@mixin su-margin( $of: false) {
  @if $of !=false {
    margin-right: gutter( of $of);
    margin-left: gutter(of $of);
  }
  @else {
    margin-right: gutter() / 2;
    margin-left: gutter() / 2;
  }
}

@mixin su-flex-container() {
  display: flex;
  flex-wrap: wrap; // flex-direction: row;
   flex-shrink: 0;
}

@mixin su-flex( $span: 1, $gutter: true) {
  flex: 1 1 span( $span );
  @if $gutter !=true {
    // Nothing to do
  }
  @else if $gutter==true {
    @include su-margin();
  }
  @else {
    @include su-margin($gutter);
  }
  @content;
}

@mixin susy-use( $config) {
  //  parse and normalize any shorthand arguments
  $config: susy-compile($config); // record the global settings -
  // and update the global variable with our new settings
  $global: $susy;
  $susy: map-merge($susy, $config) !global; // any content inside this mixin
  // will use the local settings
  @content; // return the global variable to its initial value
  $susy: $global !global;
}

@mixin susy-at( $config) {
  //  parse and normalize any shorthand arguments
  $config: susy-compile($config); // build min-and-max queries
  $min: map-get($config, 'min-width');
  $min: if($min, '(min-width: #{$min})', null);
  $max: map-get($config, 'max-width');
  $max: if($max, '(max-width: #{$max})', null); // combine them if we need both
  $and: if($min and $max, '#{$min} and #{$max}', null); // or fall back to the value we need…
  $query: $and or $min or $max; // apply the results…
  @media #{$query} {
    @include susy-use($config) {
      @content;
    }
  }
}
